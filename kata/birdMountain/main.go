package main

import (
	"fmt"
)

func PeakHeight(mountain []string) int {
	if len(mountain) == 0 {
		return 0
	}
	condition := true
	var mountainInt [][]int
	for _, v := range mountain {
		tmp := make([]int, 0)
		for _, val := range v {
			if val != rune(' ') {
				tmp = append(tmp, 1)
				condition = false
			} else {
				tmp = append(tmp, 0)
			}
		}
		mountainInt = append(mountainInt, tmp)
	}
	if condition {
		return 0
	}

	
	count := 1
	cop := copySlices(&mountainInt)
	condition = true

	for condition {
		condition = false

		for i := 1; i < len(mountainInt)-1; i++ {
			for j := 1; j < len(mountainInt[i])-1; j++ {
				if mountainInt[i][j] == count && mountainInt[i-1][j] == count && mountainInt[i+1][j] == count && mountainInt[i][j-1] == count && mountainInt[i][j+1] == count {
					cop[i][j] += 1
					condition = true
				}
			}
		}
		if condition {
			count += 1
			mountainInt = copySlices(&cop)
		}

	}
	return count
}

func copySlices(src *[][]int) [][]int {
	des := make([][]int, 0)
	for _, v := range *src {
		tmp := make([]int, 0)
		tmp = append(tmp, v...)
		des = append(des, tmp)
	}
	return des
}

func main() {
	sl := []string{"           ",
		"    ",
		"    ",
		"^   "}

	fmt.Println(PeakHeight(sl))
	sl1 := []string{"^^^^^^        ",
		" ^^^^^^^^     ",
		"  ^^^^^^^     ",
		"  ^^^^^       ",
		"  ^^^^^^^^^^^ ",
		"  ^^^^^^      ",
		"  ^^^^        "}

	fmt.Println(PeakHeight(sl1))

	sl2 := []string{
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                        ^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                        ^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                        ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                        ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                        ^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                      ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                      ^^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                         ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^",
		"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^^",
	}

	fmt.Println(PeakHeight(sl2))

	sl4 := []string{
		"     "}
	fmt.Println(PeakHeight(sl4))
	
	sl5 := []string{
		"     ",
		"^^  ",
		"        ",
	}
	fmt.Println(PeakHeight(sl5))
}
